"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[59861],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,d=c["".concat(s,".").concat(m)]||c[m]||f[m]||o;return n?r.createElement(d,l(l({ref:t},p),{},{components:n})):r.createElement(d,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},40805:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>f,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={},l=void 0,i={unversionedId:"features/portfolio/po/blacklitterman",id:"features/portfolio/po/blacklitterman",title:"blacklitterman",description:".. role:: python(code)",source:"@site/terminal/features/portfolio/po/blacklitterman.md",sourceDirName:"features/portfolio/po",slug:"/features/portfolio/po/blacklitterman",permalink:"/terminal/features/portfolio/po/blacklitterman",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/terminal/features/portfolio/po/blacklitterman.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"perf",permalink:"/terminal/features/portfolio/perf"},next:{title:"ef",permalink:"/terminal/features/portfolio/po/ef"}},s={},u=[],p={toc:u};function f(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,".. role:: python(code)\n:language: python\n:class: highlight"),(0,a.kt)("p",null,"|"),(0,a.kt)("p",null,"To obtain charts, make sure to add :python:",(0,a.kt)("inlineCode",{parentName:"p"},"chart = True")," as the last parameter."),(0,a.kt)("p",null,".. raw:: html"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<h3>\n> Getting data\n</h3>\n")),(0,a.kt)("p",null,"{{< highlight python >}}\nportfolio.po.blacklitterman(\nsymbols: List","[str]",",\nbenchmark: Dict,\np_views: List,\nq_views: List,\ninterval: str = '3y',\nstart_date: str = '',\nend_date: str = '',\nlog_returns: bool = False,\nfreq: str = 'D',\nmaxnan: float = 0.05,\nthreshold: float = 0,\nmethod: str = 'time',\nobjective: str = 'Sharpe',\nrisk_free_rate: float = 0,\nrisk_aversion: float = 1,\ndelta: float = None,\nequilibrium: bool = True,\noptimize: bool = True,\nvalue: float = 1.0,\nvalue_short: float = 0,\nchart: bool = False,\n) -> Tuple\n{{< /highlight >}}"),(0,a.kt)("p",null,".. raw:: html"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<p>\nBuilds a maximal diversification portfolio\n</p>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("p",{parentName:"li"},"  symbols : List","[str]","\nList of portfolio stocks\nbenchmark : Dict\nDict of portfolio weights\np_views: List\nMatrix P of views that shows relationships among assets and returns.\nDefault value to None.\nq_views: List\nMatrix Q of expected returns of views. Default value is None.\ninterval : str, optional\ninterval to get stock data, by default \"3mo\"\nstart_date: str\nIf not using interval, start date string (YYYY-MM-DD)\nend_date: str\nIf not using interval, end date string (YYYY-MM-DD). If empty use last\nweekday.\nlog_returns: bool\nIf True calculate log returns, else arithmetic returns. Default value\nis False\nfreq: str\nThe frequency used to calculate returns. Default value is 'D'. Possible\nvalues are:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"  - 'D' for daily returns.\n  - 'W' for weekly returns.\n  - 'M' for monthly returns.\n")),(0,a.kt)("p",{parentName:"li"},"  maxnan: float\nMax percentage of nan values accepted per asset to be included in\nreturns.\nthreshold: float\nValue used to replace outliers that are higher to threshold.\nmethod: str\nMethod used to fill nan values. Default value is 'time'. For more information see ",(0,a.kt)("inlineCode",{parentName:"p"},"interpolate <https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.interpolate.html>"),"__.\nobjective: str\nObjective function of the optimization model.\nThe default is 'Sharpe'. Possible values are:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"  - 'MinRisk': Minimize the selected risk measure.\n  - 'Utility': Maximize the risk averse utility function.\n  - 'Sharpe': Maximize the risk adjusted return ratio based on the selected risk measure.\n  - 'MaxRet': Maximize the expected return of the portfolio.\n")),(0,a.kt)("p",{parentName:"li"},"  risk_free_rate: float, optional\nRisk free rate, must be in annual frequency. The default is 0.\nrisk_aversion: float, optional\nRisk aversion factor of the 'Utility' objective function.\nThe default is 1.\ndelta: float, optional\nRisk aversion factor of Black Litterman model. Default value is None.\nequilibrium: bool, optional\nIf True excess returns are based on equilibrium market portfolio, if False\nexcess returns are calculated as historical returns minus risk free rate.\nDefault value is True.\noptimize: bool, optional\nIf True Black Litterman estimates are used as inputs of mean variance model,\nif False returns equilibrium weights from Black Litterman model\nDefault value is True.\nvalue : float, optional\nAmount of money to allocate. The default is 1.\nvalue_short : float, optional\nAmount to allocate to portfolio in short positions. The default is 0.\nchart: bool\nFlag to display chart"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("p",{parentName:"li"},"  Tuple\nDictionary of portfolio weights and DataFrame of stock returns"))),(0,a.kt)("p",null,"|"),(0,a.kt)("p",null,".. raw:: html"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<h3>\n> Getting charts\n</h3>\n")),(0,a.kt)("p",null,"{{< highlight python >}}\nportfolio.po.blacklitterman(\nsymbols: List","[str]",",\np_views: List,\nq_views: List,\ninterval: str = '3y',\nstart_date: str = '',\nend_date: str = '',\nlog_returns: bool = False,\nfreq: str = 'D',\nmaxnan: float = 0.05,\nthreshold: float = 0,\nmethod: str = 'time',\nbenchmark: Dict = None,\nobjective: str = 'Sharpe',\nrisk_free_rate: float = 0,\nrisk_aversion: float = 1,\ndelta: float = None,\nequilibrium: bool = True,\noptimize: bool = True,\nvalue: float = 1.0,\nvalue_short: float = 0,\ntable: bool = False,\nchart: bool = False,\n) -> Dict\n{{< /highlight >}}"),(0,a.kt)("p",null,".. raw:: html"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<p>\nBuilds a black litterman portfolio\n</p>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("p",{parentName:"li"},"  symbols : List","[str]","\nList of portfolio tickers\np_views: List\nMatrix P of views that shows relationships among assets and returns.\nDefault value to None.\nq_views: List\nMatrix Q of expected returns of views. Default value is None.\ninterval : str, optional\ninterval to look at returns from\nstart_date: str, optional\nIf not using interval, start date string (YYYY-MM-DD)\nend_date: str, optional\nIf not using interval, end date string (YYYY-MM-DD). If empty use last\nweekday.\nlog_returns: bool, optional\nIf True calculate log returns, else arithmetic returns. Default value\nis False\nfreq: str, optional\nThe frequency used to calculate returns. Default value is 'D'. Possible\nvalues are:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"  - 'D' for daily returns.\n  - 'W' for weekly returns.\n  - 'M' for monthly returns.\n")),(0,a.kt)("p",{parentName:"li"},"  maxnan: float, optional\nMax percentage of nan values accepted per asset to be included in\nreturns.\nthreshold: float, optional\nValue used to replace outliers that are higher to threshold.\nmethod: str\nMethod used to fill nan values. Default value is 'time'. For more information see ",(0,a.kt)("inlineCode",{parentName:"p"},"interpolate <https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.interpolate.html>"),"__.\nbenchmark : Dict\nDict of portfolio weights\nobjective: str\nObjective function of the optimization model.\nThe default is 'Sharpe'. Possible values are:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"  - 'MinRisk': Minimize the selected risk measure.\n  - 'Utility': Maximize the risk averse utility function.\n  - 'Sharpe': Maximize the risk adjusted return ratio based on the selected risk measure.\n  - 'MaxRet': Maximize the expected return of the portfolio.\n")),(0,a.kt)("p",{parentName:"li"},"  risk_free_rate: float, optional\nRisk free rate, must be in annual frequency. The default is 0.\nrisk_aversion: float, optional\nRisk aversion factor of the 'Utility' objective function.\nThe default is 1.\ndelta: float, optional\nRisk aversion factor of Black Litterman model. Default value is None.\nequilibrium: bool, optional\nIf True excess returns are based on equilibrium market portfolio, if False\nexcess returns are calculated as historical returns minus risk free rate.\nDefault value is True.\noptimize: bool, optional\nIf True Black Litterman estimates are used as inputs of mean variance model,\nif False returns equilibrium weights from Black Litterman model\nDefault value is True.\nvalue : float, optional\nAmount of money to allocate. The default is 1.\nvalue_short : float, optional\nAmount to allocate to portfolio in short positions. The default is 0.\ntable: bool, optional\nTrue if plot table weights, by default False\nchart: bool\nFlag to display chart"))))}f.isMDXComponent=!0}}]);