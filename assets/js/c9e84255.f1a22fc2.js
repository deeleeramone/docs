"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[75892],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>y});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(r),y=a,d=m["".concat(i,".").concat(y)]||m[y]||c[y]||o;return r?n.createElement(d,s(s({ref:t},p),{},{components:r})):n.createElement(d,s({ref:t},p))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var u=2;u<o;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},95572:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const o={},s=void 0,l={unversionedId:"features/economy/treasury",id:"features/economy/treasury",title:"treasury",description:".. role:: python(code)",source:"@site/terminal/features/economy/treasury.md",sourceDirName:"features/economy",slug:"/features/economy/treasury",permalink:"/terminal/features/economy/treasury",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/terminal/features/economy/treasury.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"spectrum",permalink:"/terminal/features/economy/spectrum"},next:{title:"treasury_maturities",permalink:"/terminal/features/economy/treasury_maturities"}},i={},u=[],p={toc:u};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,".. role:: python(code)\n:language: python\n:class: highlight"),(0,a.kt)("p",null,"|"),(0,a.kt)("p",null,"To obtain charts, make sure to add :python:",(0,a.kt)("inlineCode",{parentName:"p"},"chart = True")," as the last parameter."),(0,a.kt)("p",null,".. raw:: html"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<h3>\n> Getting data\n</h3>\n")),(0,a.kt)("p",null,"{{< highlight python >}}\neconomy.treasury(\ninstruments: list = None,\nmaturities: list = None,\nfrequency: str = 'monthly',\nstart_date: str = '1900-01-01',\nend_date: str = '2022-11-10',\nchart: bool = False,\n) -> pandas.core.frame.DataFrame\n{{< /highlight >}}"),(0,a.kt)("p",null,".. raw:: html"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<p>\nGet U.S. Treasury rates [Source: EconDB]\n</p>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("p",{parentName:"li"},'  instruments: list\nType(s) of treasuries, nominal, inflation-adjusted (long term average) or secondary market.\nAvailable options can be accessed through economy.treasury_maturities().\nmaturities : list\nTreasury maturities to get. Available options can be accessed through economy.treasury_maturities().\nfrequency : str\nFrequency of the data, this can be annually, monthly, weekly or daily.\nstart_date : str\nStarting date, format "YEAR-MONTH-DAY", i.e. 2010-12-31.\nend_date : str\nEnd date, format "YEAR-MONTH-DAY", i.e. 2020-06-05.\nchart: bool\nFlag to display chart'))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("p",{parentName:"li"},"  treasury_data: pd.Dataframe\nHolds data of the selected types and maturities"))),(0,a.kt)("p",null,"|"),(0,a.kt)("p",null,".. raw:: html"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<h3>\n> Getting charts\n</h3>\n")),(0,a.kt)("p",null,"{{< highlight python >}}\neconomy.treasury(\ninstruments: list = None,\nmaturities: list = None,\nfrequency: str = 'monthly',\nstart_date: str = '1900-01-01',\nend_date: str = '2022-11-10',\nraw: bool = False,\nexternal_axes: Optional[List","[axes]","] = None,\nexport: str = '',\nchart: bool = False,\n)\n{{< /highlight >}}"),(0,a.kt)("p",null,".. raw:: html"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<p>\nDisplay U.S. Treasury rates [Source: EconDB]\n</p>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("p",{parentName:"li"},'  instruments: list\nType(s) of treasuries, nominal, inflation-adjusted or secondary market.\nAvailable options can be accessed through economy.treasury_maturities().\nmaturities : list\nTreasury maturities to display. Available options can be accessed through economy.treasury_maturities().\nfrequency : str\nFrequency of the data, this can be daily, weekly, monthly or annually\nstart_date : str\nStarting date, format "YEAR-MONTH-DAY", i.e. 2010-12-31.\nend_date : str\nEnd date, format "YEAR-MONTH-DAY", i.e. 2020-06-05.\nraw : bool\nWhether to display the raw output.\nexternal_axes: Optional[List',"[plt.axes]","]\nExternal axes to plot on\nexport : str\nExport data to csv,json,xlsx or png,jpg,pdf,svg file\nchart: bool\nFlag to display chart"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("p",{parentName:"li"},"  Plots the Treasury Series."))))}c.isMDXComponent=!0}}]);