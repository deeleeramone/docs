"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[67966],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>d});var r=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var s=r.createContext({}),p=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},c=function(t){var e=p(t.components);return r.createElement(s.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,s=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),m=p(n),d=o,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(f,i(i({ref:e},c),{},{components:n})):r.createElement(f,i({ref:e},c))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},94728:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={},i=void 0,l={unversionedId:"functions/crypto/defi/vaults",id:"functions/crypto/defi/vaults",title:"vaults",description:".. role:: python(code)",source:"@site/sdk/functions/crypto/defi/vaults.md",sourceDirName:"functions/crypto/defi",slug:"/functions/crypto/defi/vaults",permalink:"/docs/sdk/functions/crypto/defi/vaults",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"validators",permalink:"/docs/sdk/functions/crypto/defi/validators"},next:{title:"categories_keys",permalink:"/docs/sdk/functions/crypto/disc/categories_keys"}},s={},p=[],c={toc:p};function u(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,".. role:: python(code)\n:language: python\n:class: highlight"),(0,o.kt)("p",null,"|"),(0,o.kt)("p",null,"To obtain charts, make sure to add :python:",(0,o.kt)("inlineCode",{parentName:"p"},"chart = True")," as the last parameter."),(0,o.kt)("p",null,".. raw:: html"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<h3>\n> Getting data\n</h3>\n")),(0,o.kt)("p",null,"{{< highlight python >}}\ncrypto.defi.vaults(\nchain: Optional","[str]"," = None,\nprotocol: Optional","[str]"," = None,\nkind: Optional","[str]"," = None,\nascend: bool = True,\nsortby: str = 'apy',\nchart: bool = False,\n) -> pandas.core.frame.DataFrame\n{{< /highlight >}}"),(0,o.kt)("p",null,".. raw:: html"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<p>\nGet DeFi Vaults Information. DeFi Vaults are pools of funds with an assigned strategy which main goal is to\nmaximize returns of its crypto assets. [Source: https://coindix.com/]\n</p>\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Parameters")),(0,o.kt)("p",{parentName:"li"},"  chain: str\nBlockchain - one from list ","[\n'ethereum', 'polygon', 'avalanche', 'bsc', 'terra', 'fantom',\n'moonriver', 'celo', 'heco', 'okex', 'cronos', 'arbitrum', 'eth',\n'harmony', 'fuse', 'defichain', 'solana', 'optimism'\n]","\nprotocol: str\nDeFi protocol - one from list: ","[\n'aave', 'acryptos', 'alpaca', 'anchor', 'autofarm', 'balancer', 'bancor',\n'beefy', 'belt', 'compound', 'convex', 'cream', 'curve', 'defichain', 'geist',\n'lido', 'liquity', 'mirror', 'pancakeswap', 'raydium', 'sushi', 'tarot', 'traderjoe',\n'tulip', 'ubeswap', 'uniswap', 'venus', 'yearn'\n]","\nkind: str\nKind/type of vault - one from list: ","['lp','single','noimploss','stable']","\nchart: bool\nFlag to display chart"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",{parentName:"li"},"  pd.DataFrame\nTop 100 DeFi Vaults for given chain/protocol sorted by APY."))),(0,o.kt)("p",null,"|"),(0,o.kt)("p",null,".. raw:: html"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<h3>\n> Getting charts\n</h3>\n")),(0,o.kt)("p",null,"{{< highlight python >}}\ncrypto.defi.vaults(\nchain: Optional","[str]"," = None,\nprotocol: Optional","[str]"," = None,\nkind: Optional","[str]"," = None,\nlimit: int = 10,\nsortby: str = 'apy',\nascend: bool = True,\nlink: bool = False,\nexport: str = '',\nchart: bool = False,\n) -> None\n{{< /highlight >}}"),(0,o.kt)("p",null,".. raw:: html"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<p>\nDisplay Top DeFi Vaults - pools of funds with an assigned strategy which main goal is to\nmaximize returns of its crypto assets. [Source: https://coindix.com/]\n</p>\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Parameters")),(0,o.kt)("p",{parentName:"li"},"  chain: str\nBlockchain - one from list ","[\n'ethereum', 'polygon', 'avalanche', 'bsc', 'terra', 'fantom',\n'moonriver', 'celo', 'heco', 'okex', 'cronos', 'arbitrum', 'eth',\n'harmony', 'fuse', 'defichain', 'solana', 'optimism'\n]","\nprotocol: str\nDeFi protocol - one from list: ","[\n'aave', 'acryptos', 'alpaca', 'anchor', 'autofarm', 'balancer', 'bancor',\n'beefy', 'belt', 'compound', 'convex', 'cream', 'curve', 'defichain', 'geist',\n'lido', 'liquity', 'mirror', 'pancakeswap', 'raydium', 'sushi', 'tarot', 'traderjoe',\n'tulip', 'ubeswap', 'uniswap', 'venus', 'yearn'\n]","\nkind: str\nKind/type of vault - one from list: ","['lp','single','noimploss','stable']","\nlimit: int\nNumber of records to display\nsortby: str\nKey by which to sort data\nascend: bool\nFlag to sort data descending\nlink: bool\nFlag to show links\nexport : str\nExport dataframe data to csv,json,xlsx file\nchart: bool\nFlag to display chart"))))}u.isMDXComponent=!0}}]);