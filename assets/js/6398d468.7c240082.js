"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[49300],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,d=u["".concat(l,".").concat(m)]||u[m]||h[m]||o;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},66290:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={},i=void 0,s={unversionedId:"features/econometrics/coint",id:"features/econometrics/coint",title:"coint",description:".. role:: python(code)",source:"@site/terminal/features/econometrics/coint.md",sourceDirName:"features/econometrics",slug:"/features/econometrics/coint",permalink:"/docs/terminal/features/econometrics/coint",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/terminal/features/econometrics/coint.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"clean",permalink:"/docs/terminal/features/econometrics/clean"},next:{title:"comparison",permalink:"/docs/terminal/features/econometrics/comparison"}},l={},p=[],c={toc:p};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,".. role:: python(code)\n:language: python\n:class: highlight"),(0,a.kt)("p",null,"|"),(0,a.kt)("p",null,"To obtain charts, make sure to add :python:",(0,a.kt)("inlineCode",{parentName:"p"},"chart = True")," as the last parameter."),(0,a.kt)("p",null,".. raw:: html"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<h3>\n> Getting data\n</h3>\n")),(0,a.kt)("p",null,"{{< highlight python >}}\neconometrics.coint(\ndependent_series, independent_series, chart: bool = False,\n)\n{{< /highlight >}}"),(0,a.kt)("p",null,".. raw:: html"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<p>\nEstimates long-run and short-run cointegration relationship for series y and x and apply\nthe two-step Engle & Granger test for cointegration.\n\nUses a 2-step process to first estimate coefficients for the long-run relationship\n    y_t = c + gamma * x_t + z_t\n\nand then the short-term relationship,\n    y_t - y_(t-1) = alpha * z_(t-1) + epsilon_t,\n\nwith z the found residuals of the first equation.\n\nThen tests cointegration by Dickey-Fuller phi=1 vs phi < 1 in\n    z_t = phi * z_(t-1) + eta_t\n\nIf this implies phi < 1, the z series is stationary is concluded to be\nstationary, and thus the series y and x are concluded to be cointegrated.\n</p>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("p",{parentName:"li"},"  dependent_series : pd.Series\nThe first time series of the pair to analyse."),(0,a.kt)("p",{parentName:"li"},"  independent_series : pd.Series\nThe second time series of the pair to analyse.\nchart: bool\nFlag to display chart"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("p",{parentName:"li"},"  c : float\nThe constant term in the long-run relationship y_t = c + gamma ",(0,a.kt)("em",{parentName:"p"}," x_t + z_t. This\ndescribes the static shift of y with respect to gamma ")," x."),(0,a.kt)("p",{parentName:"li"},"  gamma : float\nThe gamma term in the long-run relationship y_t = c + gamma * x_t + z_t. This\ndescribes the ratio between the const-shifted y and x."),(0,a.kt)("p",{parentName:"li"},"  alpha : float\nThe alpha term in the short-run relationship y",(0,a.kt)("em",{parentName:"p"},"t - y"),"(t-1) = alpha * z_(t-1) + epsilon. This\ngives an indication of the strength of the error correction toward the long-run mean."),(0,a.kt)("p",{parentName:"li"},"  z : pd.Series\nSeries of residuals z_t from the long-run relationship y_t = c + gamma * x_t + z_t, representing\nthe value of the error correction term."),(0,a.kt)("p",{parentName:"li"},"  dfstat : float\nThe Dickey Fuller test-statistic for phi = 1 vs phi < 1 in the second equation. A more\nnegative value implies the existence of stronger cointegration."),(0,a.kt)("p",{parentName:"li"},"  pvalue : float\nThe p-value corresponding to the Dickey Fuller test-statistic. A lower value implies\nstronger rejection of no-cointegration, thus stronger evidence of cointegration."))),(0,a.kt)("p",null,"|"),(0,a.kt)("p",null,".. raw:: html"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<h3>\n> Getting charts\n</h3>\n")),(0,a.kt)("p",null,"{{< highlight python >}}\neconometrics.coint(\ndatasets: Union[pandas.core.frame.DataFrame, Dict","[str, pandas.core.series.Series]","],\nsignificant: bool = False,\nplot: bool = False,\nexport: str = '',\nexternal_axes: Optional[List","[axes]","] = None,\nchart: bool = False,\n)\n{{< /highlight >}}"),(0,a.kt)("p",null,".. raw:: html"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<p>\nEstimates long-run and short-run cointegration relationship for series y and x and apply\nthe two-step Engle & Granger test for cointegration.\n\nUses a 2-step process to first estimate coefficients for the long-run relationship\n    y_t = c + gamma * x_t + z_t\n\nand then the short-term relationship,\n    y_t - y_(t-1) = alpha * z_(t-1) + epsilon_t,\n\nwith z the found residuals of the first equation.\n\nThen tests co-integration with the Dickey-Fuller phi=1 vs phi < 1 in\n    z_t = phi * z_(t-1) + eta_t\n\nIf this implies phi < 1, the z series is stationary is concluded to be\nstationary, and thus the series y and x are concluded to be cointegrated.\n</p>\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("p",{parentName:"li"},"  datasets: Union[pd.DataFrame, Dict","[str, pd.Series]","]\nAll time series to perform co-integration tests on.\nsignificant: float\nShow only companies that have p-values lower than this percentage\nplot: bool\nWhether you wish to plot the z-values of all pairs.\nexport : str\nFormat to export data\nexternal_axes:Optional[List","[plt.axes]","]\nExternal axes to plot on\nchart: bool\nFlag to display chart"))))}h.isMDXComponent=!0}}]);